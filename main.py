import os
import json
import random
import datetime
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
USER_DATA_FILE = "data/users.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
if os.path.exists(USER_DATA_FILE):
    with open(USER_DATA_FILE, "r") as f:
        user_data = json.load(f)
else:
    user_data = {}

@dp.message(CommandStart())
async def start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –¥–Ω—è üîÆ")]],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –í–æ–ø—Ä–æ—Å ‚Äî –¢–∞—Ä–æ. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ—ë –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–Ω—è üëÅ",
        reply_markup=keyboard
    )

@dp.message(lambda m: m.text and m.text.lower() in ["–ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "–ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –¥–Ω—è üîÆ"])
async def get_prediction(message: types.Message):
    user_id = str(message.from_user.id)
    today = str(datetime.date.today())

    if user_id in user_data and user_data[user_id] == today:
        await message.answer("–¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ—ë –ø–æ—Å–ª–∞–Ω–∏–µ. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ üåö")
        return

    image_folder = "data/images"
    image_files = [f for f in os.listdir(image_folder) if f.lower().endswith((".jpg", ".png"))]

    if not image_files:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return

    image_name = random.choice(image_files)
    image_path = os.path.join(image_folder, image_name)

    photo = FSInputFile(image_path)
    await bot.send_photo(message.chat.id, photo)

    user_data[user_id] = today
    with open(USER_DATA_FILE, "w") as f:
        json.dump(user_data, f)

@dp.message()
async def fallback(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –¥–Ω—è üîÆ")]],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—ë –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ üëá", reply_markup=keyboard)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())